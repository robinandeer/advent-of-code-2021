{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Day 6"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const initialState = [3,4,3,1,2]"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const TIMER_START_VALUE = 6\nconst INITIAL_TIME_DELAY = 2\n\nfunction progressDay(state: Array<number>) {\n  let newTimers = []\n  const updatedTimers = state.map((timer) => {\n    if (timer === 0) {\n      // create new fish\n      newTimers.push(TIMER_START_VALUE + INITIAL_TIME_DELAY)\n      return TIMER_START_VALUE\n    }\n\n    return timer - 1\n  })\n\n  return [...updatedTimers, ...newTimers]\n}"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function simulateDays(initialState: Array<number>, days: number) {\n  let state = [...initialState]\n  for (const _ of Array(days)) {\n    state = progressDay(state)\n  }\n  return state\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Test Data"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "simulateDays(initialState, 80).length"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m5934\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Part 1"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const initialStatePart1 = [\n  1, 1, 1, 3, 3, 2, 1, 1, 1, 1, 1, 4, 4, 1, 4, 1, 4, 1, 1, 4, 1, 1, 1, 3, 3, 2,\n  3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 4, 1, 1, 4, 3, 1, 2, 3, 1, 1, 1, 5, 2, 1, 1,\n  1, 1, 2, 1, 2, 5, 2, 2, 1, 1, 1, 3, 1, 1, 1, 4, 1, 1, 1, 1, 1, 3, 3, 2, 1, 1,\n  3, 1, 4, 1, 2, 1, 5, 1, 4, 2, 1, 1, 5, 1, 1, 1, 1, 4, 3, 1, 3, 2, 1, 4, 1, 1,\n  2, 1, 4, 4, 5, 1, 3, 1, 1, 1, 1, 2, 1, 4, 4, 1, 1, 1, 3, 1, 5, 1, 1, 1, 1, 1,\n  3, 2, 5, 1, 5, 4, 1, 4, 1, 3, 5, 1, 2, 5, 4, 3, 3, 2, 4, 1, 5, 1, 1, 2, 4, 1,\n  1, 1, 1, 2, 4, 1, 2, 5, 1, 4, 1, 4, 2, 5, 4, 1, 1, 2, 2, 4, 1, 5, 1, 4, 3, 3,\n  2, 3, 1, 2, 3, 1, 4, 1, 1, 1, 3, 5, 1, 1, 1, 3, 5, 1, 1, 4, 1, 4, 4, 1, 3, 1,\n  1, 1, 2, 3, 3, 2, 5, 1, 2, 1, 1, 2, 2, 1, 3, 4, 1, 3, 5, 1, 3, 4, 3, 5, 1, 1,\n  5, 1, 3, 3, 2, 1, 5, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 2, 5, 1, 3, 1, 1, 3, 5, 1,\n  1, 1, 1, 2, 1, 2, 4, 4, 4, 2, 2, 3, 1, 5, 1, 2, 1, 3, 3, 3, 4, 1, 1, 5, 1, 3,\n  2, 4, 1, 5, 5, 1, 4, 4, 1, 4, 4, 1, 1, 2,\n];"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "simulateDays(initialStatePart1, 80).length"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m372984\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Part 2"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function part2() {\n  const state = [...initialStatePart1]\n  const timerCategories = Array(9).fill(0)\n\n  for (const fishTimer of state) {\n    timerCategories[fishTimer]++;\n  }\n\n  for (const _ of Array(256)) {\n    const newFish = timerCategories.shift()\n    timerCategories.push(newFish);\n    timerCategories[TIMER_START_VALUE] += newFish;\n  }\n\n  return timerCategories.reduce((acc, curr) => acc + curr, 0)\n}\n\npart2()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m1681503251694\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}